// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/cluster_upgrader_builder (interfaces: ClusterUpgrader)

// Package mocks is a generated GoMock package.
package mocks

import (
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/managed-upgrade-operator/pkg/apis/upgrade/v1alpha1"
	reflect "reflect"
)

// MockClusterUpgrader is a mock of ClusterUpgrader interface
type MockClusterUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockClusterUpgraderMockRecorder
}

// MockClusterUpgraderMockRecorder is the mock recorder for MockClusterUpgrader
type MockClusterUpgraderMockRecorder struct {
	mock *MockClusterUpgrader
}

// NewMockClusterUpgrader creates a new mock instance
func NewMockClusterUpgrader(ctrl *gomock.Controller) *MockClusterUpgrader {
	mock := &MockClusterUpgrader{ctrl: ctrl}
	mock.recorder = &MockClusterUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterUpgrader) EXPECT() *MockClusterUpgraderMockRecorder {
	return m.recorder
}

// UpgradeCluster mocks base method
func (m *MockClusterUpgrader) UpgradeCluster(arg0 *v1alpha1.UpgradeConfig, arg1 logr.Logger) (v1alpha1.UpgradePhase, *v1alpha1.UpgradeCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeCluster", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.UpgradePhase)
	ret1, _ := ret[1].(*v1alpha1.UpgradeCondition)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpgradeCluster indicates an expected call of UpgradeCluster
func (mr *MockClusterUpgraderMockRecorder) UpgradeCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockClusterUpgrader)(nil).UpgradeCluster), arg0, arg1)
}
