// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/eventmanager (interfaces: EventManager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/eventmanager.go -package=mocks github.com/openshift/managed-upgrade-operator/pkg/eventmanager EventManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	notifier "github.com/openshift/managed-upgrade-operator/pkg/notifier"
	gomock "go.uber.org/mock/gomock"
)

// MockEventManager is a mock of EventManager interface.
type MockEventManager struct {
	ctrl     *gomock.Controller
	recorder *MockEventManagerMockRecorder
}

// MockEventManagerMockRecorder is the mock recorder for MockEventManager.
type MockEventManagerMockRecorder struct {
	mock *MockEventManager
}

// NewMockEventManager creates a new mock instance.
func NewMockEventManager(ctrl *gomock.Controller) *MockEventManager {
	mock := &MockEventManager{ctrl: ctrl}
	mock.recorder = &MockEventManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventManager) EXPECT() *MockEventManagerMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockEventManager) Notify(arg0 notifier.MuoState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockEventManagerMockRecorder) Notify(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockEventManager)(nil).Notify), arg0)
}

// NotifyResult mocks base method.
func (m *MockEventManager) NotifyResult(arg0 notifier.MuoState, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResult indicates an expected call of NotifyResult.
func (mr *MockEventManagerMockRecorder) NotifyResult(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResult", reflect.TypeOf((*MockEventManager)(nil).NotifyResult), arg0, arg1)
}
